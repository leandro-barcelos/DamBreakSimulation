#define NUM_THREADS 32
#define POW3(x) ((x)*(x)*(x))

static const float PI = 3.14159265358979323846264338327950288;

#pragma enable_d3d11_debug_symbols

// Buffers
RWTexture2D<float> _WallWeightTexture;
StructuredBuffer<float3> _WallParticles;

// Parameters
uint _WallWeightSamples;
uint _WallParticlesCount;
float _EffectiveRadius;
float _EffectiveRadius2;
float _EffectiveRadius9;

float W(float3 r){
    const float c = 315.0/(64.0*PI);
    float abs_r2 = dot(r,r);
    float diff_r2 = _EffectiveRadius2-abs_r2;
    return 0<diff_r2?c*POW3(diff_r2)/_EffectiveRadius9:0.0;
}

#pragma kernel CSMain

[numthreads(NUM_THREADS, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Check if we're within grid bounds
    if (any(id.x >= _WallWeightSamples))
        return;

    float step = _EffectiveRadius / _WallWeightSamples;

    float3 position = float3(0.0, step * id.x, 0.0);

    for (uint i = 0; i < _WallParticlesCount; i++)
    {
        float dist = distance(position, _WallParticles[i]);

        if (dist <= _EffectiveRadius)
        {
            _WallWeightTexture[id.xy] += W(dist);
        }
    }
}