#define NUM_THREADS 32
#define MAX_PARTICLES_PER_VOXEL 8
#define MAX_BINARY_SEARCH_STEPS 5
#define POW3(x) ((x)*(x)*(x))

static const float epsilon = 1e-6;
static const float PI = 3.14159265358979323846264338327950288;
static const float3 a_gravity = float3(0.0, -9.8, 0.0);

#pragma enable_d3d11_debug_symbols

// Buffers
RWTexture2D<float4> _FluidParticlePositionTextureWrite;
RWTexture2D<float4> _FluidParticleVelocityTextureWrite;
Texture2D<float4> _FluidParticlePositionTexture;
Texture2D<float4> _FluidParticleVelocityTexture;
Texture2D<float> _FluidParticleDensityTexture;
Texture2D<float4> _ElevationTexture;
SamplerState sampler_ElevationTexture;
StructuredBuffer<uint> _Bucket;
Texture2D<float4> _WallParticlePositionTexture;

// Parameters
uint _ParticleCount;
uint _FluidParticleCount;
float _EffectiveRadius;
float _EffectiveRadius6;
float _HalfInitialParticleSpacing;
float _ParticleMass;
float _TimeStep;
float _Viscosity;
float _GasConst;
float _RestDensity;
float _StiffnessCoeff;
float _DampingCoeff;
float2 _FluidParticleResolution;
float2 _WallParticleResolution;
float2 _ElevationResolution;
uint3 _BucketResolution;
float3 _Min;
float3 _Max;
float _MinElevation;
float _MaxElevation;
float _ElasticPoissonRatio;

float3 grad_W_press(float3 r){
    const float c = 45.0 / PI;
    float abs_r = length(r);
    float diff_r = _EffectiveRadius - abs_r;
    return (epsilon < diff_r) && (epsilon < abs_r) ? (c / _EffectiveRadius6) * POW3(diff_r) * r / abs_r : 0.0;
}

float grad_W_vis(float3 r){
    const float c = 45.0 / PI;
    float abs_r = length(r);
    return abs_r < _EffectiveRadius ? (c / _EffectiveRadius6) * (_EffectiveRadius - abs_r) : 0.0;
}

float get_elevation(float3 pos) 
{
    // Convert world position to UV coordinates (0-1 range)
    float2 uv = (pos.xz - _Min.xz) / (_Max.xz - _Min.xz);
    
    // Clamp UV coordinates to ensure we're within the texture bounds
    uv = clamp(uv, float2(0, 0), float2(1, 1));
    
    // Sample the elevation texture - this returns a normalized height (0-1)
    float normalizedElevation = _ElevationTexture.SampleLevel(sampler_ElevationTexture, uv, 0).r;
    
    // Convert from normalized value to world space elevation using the same formula as in LoadMap.SampleElevation
    return _MinElevation + normalizedElevation * (_MaxElevation - _MinElevation);
}


float3 get_surface_normal(float3 pos)
{
    // Small offset for gradient computation
    const float h = _EffectiveRadius * 0.5;
    
    // Sample elevations at offset positions
    float elevX1 = get_elevation(pos + float3(h, 0, 0));
    float elevX2 = get_elevation(pos - float3(h, 0, 0));
    float elevZ1 = get_elevation(pos + float3(0, 0, h));
    float elevZ2 = get_elevation(pos - float3(0, 0, h));
    
    // Compute gradient (partial derivatives)
    float dydx = (elevX1 - elevX2) / (2.0 * h);
    float dydz = (elevZ1 - elevZ2) / (2.0 * h);
    
    // Normal is perpendicular to the gradient
    float3 normal = normalize(float3(-dydx, 1.0, -dydz));
    return normal;
}


#pragma kernel CSMain

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Check if we're within texture bounds
    if (any(id.xy >= uint2(_FluidParticleResolution)))
        return;

    uint id_1d = id.y * uint(_FluidParticleResolution.x) + id.x;

    if (id_1d >= _FluidParticleCount)
        return;

    float3 pos_i = _FluidParticlePositionTexture[id.xy].xyz;
    float3 idx_3d = int3((pos_i - _Min) / (_Max - _Min) * (_BucketResolution - 1));

    float rho_i = _FluidParticleDensityTexture[id.xy];
    float p_i = _GasConst * (rho_i - _RestDensity);
    float4 vel_in_i = _FluidParticleVelocityTexture[id.xy];

    float3 f_press = 0.0;
    float3 f_vis = 0.0;
    float3 f_bound = 0.0;

    for (int x_offset = -1; x_offset <= 1; x_offset++)
    for (int y_offset = -1; y_offset <= 1; y_offset++)
    for (int z_offset = -1; z_offset <= 1; z_offset++)
    {
        int3 idx_3d_j = idx_3d + int3(x_offset, y_offset, z_offset);

        if(all(idx_3d_j >= 0) && all((uint3)idx_3d_j < _BucketResolution))
        {
            uint bkt_j = idx_3d_j.x + idx_3d_j.y * _BucketResolution.x + idx_3d_j.z * _BucketResolution.x * _BucketResolution.y;
            bkt_j *= MAX_PARTICLES_PER_VOXEL;
            for (uint j2 = 0; j2 < MAX_PARTICLES_PER_VOXEL; j2++)
            {
                uint j = _Bucket[bkt_j + j2];

                if (j == _ParticleCount) break;
                if (j == id_1d) continue;

                if (j >= _FluidParticleCount)
                {
                    j -= _FluidParticleCount;
                    uint2 j_2d = uint2(j % uint(_WallParticleResolution.x), j / uint(_WallParticleResolution.x));
                    float3 pos_j = _WallParticlePositionTexture[j_2d].xyz;
                    float3 pos_ij = pos_i - pos_j;
                    float dist = length(pos_ij);
                    float pen_dist = _HalfInitialParticleSpacing - dist;

                    if (pen_dist > epsilon) 
                    {
                        // Use wall-to-fluid normal direction
                        float3 normal_dir = normalize(pos_ij);
                        
                        // Correct beta calculation
                        float beta = _HalfInitialParticleSpacing / max(dist, epsilon);
                        
                        // Correct KC calculation
                        float k_c = 4.0 / 3.0 * pow(pen_dist * _EffectiveRadius, 0.5) / _ElasticPoissonRatio;
                        
                        // Calculate normal velocity component
                        float3 v_i_n = dot(vel_in_i.xyz, normal_dir) * normal_dir;
                        
                        // Calculate tangential velocity component
                        float3 v_i_t = vel_in_i.xyz - v_i_n;
                        
                        // Normal force
                        float3 f_normal = beta * (k_c * pen_dist) * normal_dir - _DampingCoeff * _ParticleMass * (v_i_n / _TimeStep);
                        
                        // Tangential force (friction)
                        float3 f_tangential = 2.0 * _ParticleMass * v_i_t / (_TimeStep * _TimeStep);
                        
                        // Apply Coulomb friction (missing in your implementation)
                        float normal_force_mag = length(f_normal);
                        float tangential_force_mag = length(f_tangential);
                        float mu = 0.5; // Friction coefficient - should be a parameter
                        
                        if (tangential_force_mag > mu * normal_force_mag) {
                            f_tangential = normalize(f_tangential) * mu * normal_force_mag;
                        }
                        
                        f_bound += f_normal + f_tangential;
                    }

                    continue;
                }

                uint2 j_2d = uint2(j % uint(_FluidParticleResolution.x), j / uint(_FluidParticleResolution.x));

                float rho_j = _FluidParticleDensityTexture[j_2d];
                float p_j = _GasConst * (rho_j - _RestDensity);
                float3 pos_j = _FluidParticlePositionTexture[j_2d].xyz;
                float3 pos_ij = pos_i - pos_j;
                // Prevent division by zero in force calculations
                if (rho_j > epsilon)
                {
                    f_press += ((p_i + p_j) / (2.0 * rho_j)) * grad_W_press(pos_ij);
                    f_vis += ((_FluidParticleVelocityTexture[j_2d].xyz - vel_in_i.xyz) / rho_j) * grad_W_vis(pos_ij);
                }
            }
        }
    }

    f_bound *= +_ParticleMass;

    // Prevent division by zero in final force calculations
    if (rho_i > epsilon)
    {
        f_press *= _ParticleMass * _ParticleMass / rho_i;
        f_vis *= _Viscosity * _ParticleMass * _ParticleMass / rho_i;
    }

    float3 f_wall = 0.0;
    float3 r = 0.0;

    float left = _Min.x + _EffectiveRadius;
    float right = _Max.x - _EffectiveRadius;
    float bottom = _Min.y + _EffectiveRadius;
    float top = _Max.y - _EffectiveRadius;
    float front = _Min.z + _EffectiveRadius;
    float back = _Max.z - _EffectiveRadius;

    if(pos_i.x < left) 
        r.x += left - pos_i.x;
    else if(pos_i.x > right) 
        r.x += right - pos_i.x;

    if(pos_i.y < bottom) 
        r.y += bottom - pos_i.y;
    else if(pos_i.y > top) 
        r.y += top - pos_i.y;

    if(pos_i.z < front) 
        r.z += front - pos_i.z;
    else if(pos_i.z > back) 
        r.z += back - pos_i.z;
        
    float3 abs_r = abs(r);
    float max_r = max(abs_r.x, max(abs_r.y, abs_r.z));

    if(max_r > 0)
    {
        f_wall = r * _StiffnessCoeff;
        f_wall *= _ParticleMass;
    }

    float3 a_i = a_gravity + (float3(f_press + f_vis) + f_wall + f_bound) / _ParticleMass;
    float4 vel_out_i = vel_in_i + float4(a_i * _TimeStep, 1.0);

    float4 pos_out_i = float4(pos_i, 1.0) + _TimeStep * vel_out_i;
    pos_out_i = clamp(pos_out_i, float4(_Min, 1.0), float4(_Max, 1.0));
    
    _FluidParticleVelocityTextureWrite[id.xy] = vel_out_i;
    _FluidParticlePositionTextureWrite[id.xy] = pos_out_i;
}
