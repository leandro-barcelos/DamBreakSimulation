#include "shaderDefs.cginc"

#pragma enable_d3d11_debug_symbols

// Buffers
RWTexture2D<float4> _FluidParticlePositionTextureWrite;
RWTexture2D<float4> _FluidParticleVelocityTextureWrite;
Texture2D<float4> _FluidParticlePositionTexture;
Texture2D<float4> _WallParticlePositionTexture;
Texture2D<float4> _FluidParticleVelocityTexture;
Texture2D<float> _FluidParticleDensityTexture;
Texture2D<float4> _ElevationTexture;
SamplerState sampler_ElevationTexture;
StructuredBuffer<uint> _Bucket;

// Parameters
uint _MaxParticlesPerVoxel;
uint _ParticleCount;
uint _FluidParticleCount;
float _EffectiveRadius;
float _EffectiveRadius6;
float _ParticleMass;
float _TimeStep;
float _Viscosity;
float _GasConst;
float _RestDensity;
float _DampingCoeff;
float2 _FluidParticleResolution;
float2 _WallParticleResolution;
uint3 _BucketResolution;
float3 _Min;
float3 _Max;
float _MinElevation;
float _MaxElevation;
float _Mu;
float _YieldStress;

float3x3 calculate_strain_rate_tensor(float3 vel_i, float3 vel_j, float3 r_ij) {
    // Calculate strain rate tensor D = (∇v + ∇v^T) / 2
    float inv_r = 1.0 / length(r_ij);
    float3 vel_diff = vel_j - vel_i;
    
    // Compute components of ∇v
    float3x3 grad_v;
    grad_v[0] = vel_diff * (r_ij.x * inv_r);
    grad_v[1] = vel_diff * (r_ij.y * inv_r);
    grad_v[2] = vel_diff * (r_ij.z * inv_r);
    
    // Calculate D = (∇v + ∇v^T) /.2
    float3x3 D;
    D[0][0] = grad_v[0][0];
    D[0][1] = 0.5 * (grad_v[0][1] + grad_v[1][0]);
    D[0][2] = 0.5 * (grad_v[0][2] + grad_v[2][0]);
    D[1][0] = D[0][1];
    D[1][1] = grad_v[1][1];
    D[1][2] = 0.5 * (grad_v[1][2] + grad_v[2][1]);
    D[2][0] = D[0][2];
    D[2][1] = D[1][2];
    D[2][2] = grad_v[2][2];
    
    return D;
}

float compute_D_magnitude(float3x3 D) {
    // Calculate |D| = sqrt(D:D) - the second invariant of D
    float sum = 0.0;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            sum += D[i][j] * D[i][j];
        }
    }
    return sqrt(sum);
}

float3x3 calculate_stress_tensor(float3x3 D, float D_mag, float viscosity) {
    float3x3 tau;
    
    if (D_mag < epsilon) 
    {
        // Zero strain rate - treat as solid
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                tau[i][j] = 0.0;
            }
        }
    }
    else 
    {
        // Above yield stress - Bingham model: τ = (τY/|D| + 2μ)D
        float bingham_factor = _YieldStress / D_mag + 2.0 * viscosity;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                tau[i][j] = bingham_factor * D[i][j];
            }
        }
    }
    
    return tau;
}

float3 grad_W_press(float3 r){
    const float c = 45.0 / PI;
    float abs_r = length(r);
    float diff_r = _EffectiveRadius - abs_r;
    return (epsilon < diff_r) && (epsilon < abs_r) ? (c / _EffectiveRadius6) * POW3(diff_r) * r / abs_r : 0.0;
}

float grad_W_vis(float3 r){
    const float c = 45.0 / PI;
    float abs_r = length(r);
    return abs_r < _EffectiveRadius ? (c / _EffectiveRadius6) * (_EffectiveRadius - abs_r) : 0.0;
}

float get_elevation(float3 pos) 
{
    // Convert world position to UV coordinates (0-1 range)
    float2 uv = (pos.xz - _Min.xz) / (_Max.xz - _Min.xz);
    
    // Clamp UV coordinates to ensure we're within the texture bounds
    uv = clamp(uv, float2(0, 0), float2(1, 1));
    
    // Sample the elevation texture - this returns a normalized height (0-1)
    float normalizedElevation = _ElevationTexture.SampleLevel(sampler_ElevationTexture, uv, 0).r;
    
    // Convert from normalized value to world space elevation using the same formula as in LoadMap.SampleElevation
    return _MinElevation + normalizedElevation * (_MaxElevation - _MinElevation);
}


float3 get_surface_normal(float3 pos)
{
    // Small offset for gradient computation
    const float h = _EffectiveRadius * 0.5;
    
    // Sample elevations at offset positions
    float elevX1 = get_elevation(pos + float3(h, 0, 0));
    float elevX2 = get_elevation(pos - float3(h, 0, 0));
    float elevZ1 = get_elevation(pos + float3(0, 0, h));
    float elevZ2 = get_elevation(pos - float3(0, 0, h));
    
    // Compute gradient (partial derivatives)
    float dydx = (elevX1 - elevX2) / (2.0 * h);
    float dydz = (elevZ1 - elevZ2) / (2.0 * h);
    
    // Normal is perpendicular to the gradient
    float3 normal = normalize(float3(-dydx, 1.0, -dydz));
    return normal;
}


#pragma kernel CSMain

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Check if we're within texture bounds
    if (any(id.xy >= uint2(_FluidParticleResolution)))
        return;

    uint id_1d = id.y * uint(_FluidParticleResolution.x) + id.x;

    if (id_1d >= _FluidParticleCount)
        return;

    float3 pos_i = _FluidParticlePositionTexture[id.xy].xyz;
    float3 idx_3d = int3((pos_i - _Min) / (_Max - _Min) * (_BucketResolution - 1));

    float rho_i = _FluidParticleDensityTexture[id.xy];
    float p_i = _GasConst * (rho_i - _RestDensity);
    float4 vel_in_i = _FluidParticleVelocityTexture[id.xy];

    float3 f_press = 0.0;
    float3 f_vis = 0.0;
    float3 f_bound = 0.0;

    bool is_isolated = false;
    int neighborCount = 0;

    for (int x_offset = -1; x_offset <= 1; x_offset++)
    for (int y_offset = -1; y_offset <= 1; y_offset++)
    for (int z_offset = -1; z_offset <= 1; z_offset++)
    {
        int3 idx_3d_j = idx_3d + int3(x_offset, y_offset, z_offset);

        if(all(idx_3d_j >= 0) && all((uint3)idx_3d_j < _BucketResolution))
        {
            uint bkt_j = idx_3d_j.x + idx_3d_j.y * _BucketResolution.x + idx_3d_j.z * _BucketResolution.x * _BucketResolution.y;
            bkt_j *= _MaxParticlesPerVoxel;
            for (uint j2 = 0; j2 < _MaxParticlesPerVoxel; j2++)
            {
                uint j = _Bucket[bkt_j + j2];

                if (j == _ParticleCount) break;
                if (j == id_1d) continue;

                if (j >= _FluidParticleCount)
                {
                    j -= _FluidParticleCount;
                    uint2 j_2d = uint2(j % uint(_WallParticleResolution.x), j / uint(_WallParticleResolution.x));
                    float3 pos_j = _WallParticlePositionTexture[j_2d].xyz;
                    float3 pos_ij = pos_i - pos_j;
                    float dist = length(pos_ij);
                    float pen_dist = _EffectiveRadius - dist;

                    float3 normal = get_surface_normal(pos_i);
                    float d_dummy = _EffectiveRadius;
                    float d_soil = dist;

                    float beta_prime = d_dummy / max(d_soil, epsilon);

                    float3 delta_v_i = -vel_in_i.xyz;

                    if (pen_dist > epsilon && dot(vel_in_i.xyz, normal) < 0.0)
                    {
                        float3 delta_v_n_i = dot(delta_v_i, normal) * normal;
                        float3 modified_normal_vel = beta_prime * (1.0 - _DampingCoeff) * delta_v_n_i;
                        float3 delta_v_s_i = delta_v_i - delta_v_n_i;
                        
                        float f_n_magnitude = length((2.0 * _ParticleMass * modified_normal_vel) / _TimeStep);
                        float f_s_magnitude = length((2.0 * _ParticleMass * delta_v_s_i) / _TimeStep);
                        
                        if (f_s_magnitude > _Mu * f_n_magnitude && f_n_magnitude > epsilon)
                            delta_v_s_i *= _Mu * (f_n_magnitude / f_s_magnitude);
                        
                        float3 f_normal = (2.0 * _ParticleMass * modified_normal_vel) / _TimeStep;
                        float3 f_tangential = (2.0 * _ParticleMass * delta_v_s_i) / _TimeStep;
                        
                        f_bound += f_normal + f_tangential;
                    }
                }
                else
                {
                    uint2 j_2d = uint2(j % uint(_FluidParticleResolution.x), j / uint(_FluidParticleResolution.x));

                    float rho_j = _FluidParticleDensityTexture[j_2d];
                    float p_j = _GasConst * (rho_j - _RestDensity);
                    float3 pos_j = _FluidParticlePositionTexture[j_2d].xyz;
                    float3 pos_ij = pos_i - pos_j;
                    float3 vel_j = _FluidParticleVelocityTexture[j_2d].xyz;

                    // Prevent division by zero in force calculations
                    if (rho_j > epsilon)
                    {
                        f_press += ((p_i + p_j) / (2.0 * rho_j)) * grad_W_press(pos_ij);

                        float dist = length(pos_ij);
                        if (dist < _EffectiveRadius) 
                        {
                            float3x3 D = calculate_strain_rate_tensor(vel_in_i.xyz, vel_j, pos_ij);
                            float D_mag = compute_D_magnitude(D);

                            float3x3 tau = calculate_stress_tensor(D, D_mag, _Viscosity);

                            float3 force_contribution = 0.0;

                            force_contribution += tau[0] * normalize(pos_ij)[0];
                            force_contribution += tau[1] * normalize(pos_ij)[1];
                            force_contribution += tau[2] * normalize(pos_ij)[2];

                            f_vis += (force_contribution / rho_j) * grad_W_vis(pos_ij);
                        }
                
                        if (dist < _EffectiveRadius * 1.5)
                            neighborCount++;
                    }
                }
            }
        }
    }

    is_isolated = neighborCount < 3;

    // Prevent division by zero in final force calculations
    if (rho_i > epsilon)
    {
        f_press *= _ParticleMass * _ParticleMass / rho_i;
        f_vis *= _Viscosity * _ParticleMass * _ParticleMass / rho_i;
    }

    float3 a_i = a_gravity + (float3(f_press + f_vis) + f_bound) / _ParticleMass;
    float4 vel_out_i = vel_in_i + float4(a_i * _TimeStep, 1.0);

    // Maximum allowed velocity to prevent numerical issues
    const float maxSpeed = 50.0; // Adjust based on your scene scale
    float speed = length(vel_out_i.xyz);

    if (speed > maxSpeed || is_isolated)
    {
        // For isolated or high-speed particles, apply stronger damping
        float dampingFactor = is_isolated ? 0.95 : 0.9;
        vel_out_i.xyz *= dampingFactor;
        
        // If the particle is truly isolated, try to reintegrate it
        if (is_isolated && rho_i < 0.7 * _RestDensity) {
            // Apply velocity towards center of simulation to try pulling it back
            float3 toCenter = (_Min + _Max) * 0.5 - pos_i;
            float centerDist = length(toCenter);
            if (centerDist > 0.001) {
                toCenter = normalize(toCenter);
                vel_out_i.xyz += toCenter * _TimeStep * 2.0;
            }
        }
    }

    float4 pos_out_i = float4(pos_i, 1.0) + _TimeStep * vel_out_i;

    float elevation = get_elevation(pos_out_i.xyz);
    pos_out_i.y = max(pos_out_i.y, elevation);

    pos_out_i = clamp(pos_out_i, float4(_Min, 1.0), float4(_Max, 1.0));
    
    _FluidParticleVelocityTextureWrite[id.xy] = vel_out_i;
    _FluidParticlePositionTextureWrite[id.xy] = pos_out_i;
}
